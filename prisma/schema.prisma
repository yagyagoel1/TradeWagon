// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(uuid())
  email           String        @unique
  fullName        String
  password        String
  avatar          Boolean       @default(false)
  role            Role          @default(USER)
  cart            Cart?
  orders          Order[]
  transaction     Transaction[]
  address         Address[]
  review          Review[]
  otp             Otp?
  refreshToken    String?
  isEmailVerified Boolean       @default(false)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Review {
  id         String  @id @default(uuid())
  content    String?
  title      String?
  rating     Rating
  product    Product @relation(fields: [productId], references: [id])
  productId  String
  owner      User    @relation(fields: [ownerEmail], references: [email])
  ownerEmail String
}

model Product {
  id            String      @id @default(uuid())
  name          String
  description   String
  price         Float
  image         Boolean     @default(false)
  reviews       Review[]
  rating        Float       @default(0)
  purchaseCount Int         @default(0)
  productType   ProductType
  cart          Cart[]
  order         Order[]
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Cart {
  id         String    @id @default(uuid())
  items      Product[]
  owner      User      @relation(fields: [ownerEmail], references: [email])
  ownerEmail String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

model Order {
  id             String         @id @default(uuid())
  items          Product[]
  owner          User           @relation(fields: [ownerEmail], references: [email])
  ownerEmail     String
  totalPrice     Float
  transaction    Transaction?
  deliveryStatus DeliveryStatus
  paymentMethod  PaymentMethod
  paymentStatus  PaymentStatus
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Transaction {
  id            String            @id @default(uuid())
  transactionId String
  status        TransactionStatus
  amount        Float
  user          User              @relation(fields: [userEmail], references: [email])
  userEmail     String
  order         Order             @relation(fields: [orderId], references: [id])
  orderId       String            @unique
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
}

model Address {
  id         String @id @default(uuid())
  street     String
  city       String
  state      String
  country    String
  postalCode String
  owner      User   @relation(fields: [ownerEmail], references: [email])
  ownerEmail String
}

model Otp {
  id        String   @id @default(uuid())
  code      String
  user      User     @relation(fields: [userEmail], references: [email])
  userEmail String   @unique
  createdAt DateTime @default(now())
}

enum Rating {
  ONE
  TWO
  THREE
  FOUR
  FIVE
}

enum Role {
  USER
  ADMIN
}

enum ProductType {
  ELECTRONICS
  CLOTHING
  BOOKS
  FURNITURE
  OTHER
}

enum DeliveryStatus {
  PENDING
  PACKED
  SHIPPED
  DELIVERED
  CANCELLED
  RETURNED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  NET_BANKING
  UPI
  COD
}

enum PaymentStatus {
  SUCCESS
  FAILED
  COD
}

enum TransactionStatus {
  PENDING
  SUCCESS
  FAILED
}
